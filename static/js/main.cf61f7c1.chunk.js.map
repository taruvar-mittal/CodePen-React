{"version":3,"sources":["components/Editor.js","hooks/useLocalStorage.js","components/App.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","type","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","classname","title","sandbox","frameborder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAUe,SAASA,EAAOC,GAAQ,IAEnCC,EAIED,EAJFC,SACAC,EAGEF,EAHFE,YACAC,EAEEH,EAFFG,MACAC,EACEJ,EADFI,SALkC,EAOZC,oBAAS,GAPG,mBAO7BC,EAP6B,KAOvBC,EAPuB,KAapC,OACE,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACE,sBAAKE,UAAU,eAAf,UACGN,EACD,wBACEO,KAAK,SACLD,UAAU,sBACVE,QAAS,kBAAMH,GAAQ,SAAAI,GAAQ,OAAKA,MAHtC,SAKE,cAAC,IAAD,CAAiBC,KAAMN,EAAOO,IAAgBC,WAGlD,cAAC,aAAD,CACEC,eAjBN,SAAsBC,EAAQC,EAAMd,GAClCC,EAASD,IAiBLA,MAAOA,EACPK,UAAU,sBACVU,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,KAAMpB,EACNqB,MAAO,WACPC,aAAa,QCxCR,SAASC,EAAgBC,EAAKC,GAC3C,IAAMC,EAHO,iBAGgBF,EAD4B,EAG/BpB,oBAAS,WACjC,IAAMuB,EAAYC,aAAaC,QAAQH,GACvC,OAAiB,MAAbC,EAA0BG,KAAKC,MAAMJ,GAEb,oBAAjBF,EACFA,IAEAA,KAV8C,mBAGlDvB,EAHkD,KAG3C8B,EAH2C,KAkBzD,OAJAC,qBAAU,WACRL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUjC,MAChD,CAACwB,EAAaxB,IAEV,CAACA,EAAO8B,GCwCFI,MAzDf,WAAgB,IAAD,EACWb,EAAgB,OAAQ,IADnC,mBACNc,EADM,KACAC,EADA,OAESf,EAAgB,MAAM,IAF/B,mBAENgB,EAFM,KAEDC,EAFC,OAGOjB,EAAgB,KAAK,IAH5B,mBAGNkB,EAHM,KAGFC,EAHE,OAIetC,mBAAS,IAJxB,mBAINuC,EAJM,KAIEC,EAJF,KAqBb,OAfAX,qBAAU,WACP,IAAMY,EAAUC,YAAW,WACxBF,EAAU,uCAAD,OAECP,EAFD,qCAGEE,EAHF,uCAIGE,EAJH,6CAOT,KAEH,OAAO,kBAAMM,aAAaF,MAC3B,CAACR,EAAKE,EAAIE,IAIV,qCACE,sBAAKlC,UAAU,gBAAf,UACE,cAACT,EAAD,CACIE,SAAS,MACTC,YAAY,OACZC,MAAOmC,EACPlC,SAAUmC,IAEd,cAACxC,EAAD,CACIE,SAAS,MACTC,YAAY,MACZC,MAAOqC,EACPpC,SAAUqC,IAEd,cAAC1C,EAAD,CACIE,SAAS,aACTC,YAAY,KACZC,MAAOuC,EACPtC,SAAUuC,OAGhB,qBAAKM,UAAU,OAAf,SACE,wBACEL,OAAUA,EACVM,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,eCjDjBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cf61f7c1.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCompressAlt, faExpandAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default function Editor(props) {\r\n  const {\r\n    language,\r\n    displayName,\r\n    value,\r\n    onChange\r\n  } = props\r\n  const [open, setOpen] = useState(true)\r\n\r\n  function handleChange(editor, data, value) {\r\n    onChange(value)\r\n  }\r\n\r\n  return (\r\n    <div className={`editor-container ${open ? '' : 'collapsed'}`}>\r\n      <div className=\"editor-title\">\r\n        {displayName}\r\n        <button\r\n          type=\"button\"\r\n          className=\"expand-collapse-btn\"\r\n          onClick={() => setOpen(prevOpen => !prevOpen)}\r\n        >\r\n          <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\r\n        </button>\r\n      </div>\r\n      <ControlledEditor\r\n        onBeforeChange={handleChange}\r\n        value={value}\r\n        className=\"code-mirror-wrapper\"\r\n        options={{\r\n          lineWrapping: true,\r\n          lint: true,\r\n          mode: language,\r\n          theme: 'material',\r\n          lineNumbers: true\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}","import { useEffect, useState } from 'react'\r\n\r\nconst PREFIX = 'codepen-clone-'\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key\r\n\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey)\r\n    if (jsonValue != null) return JSON.parse(jsonValue)\r\n\r\n    if (typeof initialValue === 'function') {\r\n      return initialValue()\r\n    } else {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n  }, [prefixedKey, value])\r\n\r\n  return [value, setValue]\r\n}","import React, { useState, useEffect } from 'react';\nimport  Editor  from './Editor';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\n\nfunction App() {\n  const [html, setHtml] = useLocalStorage('html', '');\n  const [css, setCss] = useLocalStorage('css','');\n  const [js, setJs] = useLocalStorage('js','');\n  const [srcDoc, setSrcDoc] = useState('');\n\n  useEffect(() => {\n     const timeout = setTimeout(() => {\n        setSrcDoc(`\n          <html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n         </html>\n        `)\n     }, 250)\n\n     return () => clearTimeout(timeout);\n  },[html,css,js]);\n\n\n  return (\n    <>\n      <div className=\"pane top-pane\">\n        <Editor \n            language=\"xml\" \n            displayName=\"HTML\" \n            value={html} \n            onChange={setHtml}\n        />\n        <Editor \n            language=\"css\" \n            displayName=\"CSS\" \n            value={css} \n            onChange={setCss}\n        />\n        <Editor \n            language=\"javascript\" \n            displayName=\"JS\" \n            value={js} \n            onChange={setJs}\n        />\n      </div>\n      <div classname=\"pane\">\n        <iframe\n          srcDoc = {srcDoc}\n          title=\"output\" \n          sandbox=\"allow-scripts\"\n          frameborder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </div>\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}